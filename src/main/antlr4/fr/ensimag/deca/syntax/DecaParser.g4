parser grammar DecaParser;

options {
    // Default language but name it anyway
    //
    language  = Java;

    // Use a superclass to implement all helper
    // methods, instance variables and overrides
    // of ANTLR default methods, such as error
    // handling.
    //
    superClass = AbstractDecaParser;

    // Use the vocabulary generated by the accompanying
    // lexer. Maven knows how to work out the relationship
    // between the lexer and parser and will build the
    // lexer before the parser. It will also rebuild the
    // parser if the lexer changes.
    //
    tokenVocab = DecaLexer;

}

// which packages should be imported?
@header {
    import fr.ensimag.deca.tree.*;
    import java.io.PrintStream;
    import org.apache.log4j.Logger;
    import fr.ensimag.deca.tools.*;

}

@members {
    @Override
    protected AbstractProgram parseProgram() {
        return prog().tree;
    }

    private static Logger logger = Logger.getLogger(DecaLexer.class);
}

prog returns[AbstractProgram tree]
    : list_classes main EOF {
            assert($list_classes.tree != null);
            assert($main.tree != null);
            $tree = new Program($list_classes.tree, $main.tree);
            setLocation($tree, $list_classes.start);
        }
    ;

main returns[AbstractMain tree]
    : /* epsilon */ {
            $tree = new EmptyMain();
        }
    | block {
            assert($block.decls != null);
            assert($block.insts != null);
            $tree = new Main($block.decls, $block.insts);
            setLocation($tree, $block.start);
        }
    ;

block returns[ListDeclVar decls, ListInst insts]
    : OBRACE list_decl list_inst CBRACE {
            assert($list_decl.tree != null);
            assert($list_inst.tree != null);
            $decls = $list_decl.tree;
            $insts = $list_inst.tree;
        }
    ;

list_decl returns[ListDeclVar tree]
@init   {
            $tree = new ListDeclVar();
        }
    : decl_var_set[$tree]*
    ;

decl_var_set[ListDeclVar l]
    : t=type list_decl_var[$l,$type.tree] SEMI{
      setLocation($l,$t.start);
    }
    ;

list_decl_var[ListDeclVar l, AbstractIdentifier t]
    : dv1=decl_var[$t] {
        assert($l != null);
        $l.add($dv1.tree);
        setLocation($l,$dv1.start);
        } (COMMA dv2=decl_var[$t] {
          $l.add($dv2.tree);
          setLocation($l,$dv2.start);
        }
      )*
    ;

decl_var[AbstractIdentifier t] returns[AbstractDeclVar tree]
@init   {
  			AbstractInitialization init = new NoInitialization();
        }
    : i=ident {
        assert($i.tree != null);
        }
      (eq=EQUALS e=expr { //Du type int a = 4;
          assert($e.tree != null);
          init = new Initialization($e.tree);
          setLocation(init,$e.start);
        }
      )? {    //Du type int a;
        assert($t != null);
        $tree = new DeclVar($t,$i.tree, init);
        setLocation($tree, $i.start);
        }
    ;

list_inst returns[ListInst tree]
@init {
  			$tree = new ListInst();
}
    : (e=inst {
        assert($inst.tree != null);
    		$tree.add($inst.tree);
        setLocation($tree,$inst.start);
        }
      )*
    ;

inst returns[AbstractInst tree]
    : e1=expr SEMI {
            assert($e1.tree != null);
            $tree = $e1.tree;
            setLocation($tree,$e1.start);
        }
    | SEMI {
          $tree = new NoOperation();
          setLocation($tree,$SEMI);
        }
    | p=PRINT OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Print(false, $list_expr.tree);
            setLocation($tree, $p);
        }
    | p=PRINTLN OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Println(false, $list_expr.tree);
            setLocation($tree, $p);
        }
    | p=PRINTX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Print(true, $list_expr.tree);
            setLocation($tree, $p);
        }
    | p=PRINTLNX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Println(true, $list_expr.tree);
            setLocation($tree, $p);
        }
    | if_then_else {
            assert($if_then_else.tree != null);
            $tree = $if_then_else.tree;
            setLocation($tree,$if_then_else.start);
        }
    | WHILE OPARENT condition=expr CPARENT OBRACE body=list_inst CBRACE {
            assert($condition.tree != null);
            assert($body.tree != null);
            $tree = new While($condition.tree,$body.tree);
            setLocation($tree,$WHILE);
        }
    | RETURN expr SEMI {
            assert($expr.tree != null);
            $tree = new Return($expr.tree);
            setLocation($tree,$RETURN);
        }
    ;

if_then_else returns[IfThenElse tree]
@init {
  $tree = new IfThenElse();
  ListInst temp_list = new ListInst();
  temp_list.add($tree); //Ajout du IFthenElse superieur
}
    : if1=IF OPARENT condition=expr CPARENT OBRACE li_if=list_inst CBRACE {
        assert($condition.tree != null);
        assert($li_if.tree != null);
        ((IfThenElse)temp_list.getLast()).setIf($condition.tree); //Remplissage condition/Then
        ((IfThenElse)temp_list.getLast()).setThen($li_if.tree);
        setLocation($tree,$if1);
        }
      (ELSE elsif=IF OPARENT elsif_cond=expr CPARENT OBRACE elsif_li=list_inst CBRACE {
          IfThenElse elsif_case = new IfThenElse();
          ListInst temp_else_list = new ListInst();
          elsif_case.setIf($elsif_cond.tree);
          elsif_case.setThen($elsif_li.tree);
          temp_else_list.add(elsif_case); //Ajout a la liste temporaire du else le if/else créé
          ((IfThenElse)temp_list.getLast()).setElse(temp_else_list); //Insertion dans le else du précédent (ou le dernier créé plutot)
          temp_list.add(elsif_case);  //Ajout a la liste temporaire générale comme étant le dernier
          setLocation(elsif_case,$elsif);
        }
      )*
      (ELSE OBRACE li_else=list_inst CBRACE {
        assert($condition.tree != null);
        ((IfThenElse)temp_list.getLast()).setElse($li_else.tree);
        setLocation($tree,$ELSE);
        }
      )?
    ;

list_expr returns[ListExpr tree]
@init   {
        $tree = new ListExpr();
        }
    : (e1=expr {
      assert($e1.tree != null);
      $tree.add($e1.tree);
      setLocation($tree,$e1.start);
        }
       (COMMA e2=expr {
         assert($e2.tree != null);
         $tree.add($e2.tree);
        }
       )* )?
    ;

expr returns[AbstractExpr tree]
    : assign_expr {
            assert($assign_expr.tree != null);
            $tree = $assign_expr.tree;
            setLocation($tree,$assign_expr.start);
        }
    ;

assign_expr returns[AbstractExpr tree]
    : e=or_expr (
        /* condition: expression e must be a "LVALUE" */ {
            if (! ($e.tree instanceof AbstractLValue)) {
                throw new InvalidLValue(this, $ctx);
            }

        }
        EQUALS e2=assign_expr {
            assert($e.tree != null);
            assert($e2.tree != null);
            AbstractLValue Abl_cast = (AbstractLValue)$e.tree;
            $tree = new Assign(Abl_cast,$e2.tree);
            setLocation($tree,$e.start);
        }
      | /* epsilon */ {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree,$e.start);

        }
      )
    ;

or_expr returns[AbstractExpr tree]
    : e=and_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree,$e.start);
        }
    | e1=or_expr OR e2=and_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Or($e1.tree,$e2.tree);
            setLocation($tree,$e1.start);
       }
    ;

and_expr returns[AbstractExpr tree]
    : e=eq_neq_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree,$e.start);
        }
    |  e1=and_expr AND e2=eq_neq_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new And($e1.tree,$e2.tree);
            setLocation($tree,$e1.start);
        }
    ;

eq_neq_expr returns[AbstractExpr tree]
    : e=inequality_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree,$e.start);
        }
    | e1=eq_neq_expr EQEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Equals($e1.tree,$e2.tree);
            setLocation($tree,$e1.start);
        }
    | e1=eq_neq_expr NEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new NotEquals($e1.tree,$e2.tree);
            setLocation($tree,$e1.start);
        }
    ;

inequality_expr returns[AbstractExpr tree]
    : e=sum_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree,$e.start);
        }
    | e1=inequality_expr LEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new LowerOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr GEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new GreaterOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr GT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Greater($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr LT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Lower($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr INSTANCEOF type {
            assert($e1.tree != null);
            assert($type.tree != null);
        }
    ;


sum_expr returns[AbstractExpr tree]
    : e=mult_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree,$e.start);
        }
    | e1=sum_expr PLUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Plus($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=sum_expr MINUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Minus($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    ;

mult_expr returns[AbstractExpr tree]
    : e=unary_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree,$e.start);
        }
    | e1=mult_expr TIMES e2=unary_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Multiply($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=mult_expr SLASH e2=unary_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Divide($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=mult_expr PERCENT e2=unary_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Modulo($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    ;

unary_expr returns[AbstractExpr tree]
    : op=MINUS e=unary_expr {
            assert($e.tree != null);
            $tree = new UnaryMinus($e.tree);
            setLocation($tree, $e.start);
        }
    | op=EXCLAM e=unary_expr {
            assert($e.tree != null);
            $tree = new Not($e.tree);
            setLocation($tree, $e.start);
        }
    | select_expr {
            assert($select_expr.tree != null);
            $tree = $select_expr.tree;
            setLocation($tree,$select_expr.start);
        }
    ;

select_expr returns[AbstractExpr tree]
    : e=primary_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree,$e.start);
        }
    | e1=select_expr DOT i=ident {
            assert($e1.tree != null);
            assert($i.tree != null);
        }
        (o=OPARENT args=list_expr CPARENT {
            // we matched "e1.i(args)"
            assert($args.tree != null);
            $tree = new MethodCall($e1.tree,$i.tree,$args.tree);
            setLocation($tree,$e1.start);


        }
        | /* epsilon */ {
            // we matched "e.i" (donc selection d'attribut)
            $tree = new Selection($e1.tree,$i.tree);
            setLocation($tree,$e1.start);


        }
        )
    ;

primary_expr returns[AbstractExpr tree]
@init{
}
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
            setLocation($tree, $ident.start);
        }
    | m=ident OPARENT args=list_expr CPARENT {
            assert($args.tree != null);
            assert($m.tree != null);
            This t = new This(false);
            $tree = new MethodCall((AbstractExpr)t,$ident.tree,$args.tree);
            setLocation(t,$m.start);
            setLocation($tree,$m.start);


        }
    | OPARENT expr CPARENT {
            assert($expr.tree != null);
            $tree = $expr.tree;
            setLocation($tree, $OPARENT);
        }
    | rdi=READINT OPARENT CPARENT {
            $tree = new ReadInt();
    		    setLocation($tree, $rdi);
        }
    | rdf=READFLOAT OPARENT CPARENT {
      $tree = new ReadFloat();
      setLocation($tree, $rdf);
        }
    | NEW ident OPARENT CPARENT {
            assert($ident.tree != null);
            $tree = new New($ident.tree);
            setLocation($tree,$NEW);


        }
    | cast=OPARENT type CPARENT OPARENT expr CPARENT {
            assert($type.tree != null);
            assert($expr.tree != null);


        }
    | literal {
            assert($literal.tree != null);
            $tree = $literal.tree;
            setLocation($tree, $literal.start);
        }
    ;

type returns[AbstractIdentifier tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
            setLocation($tree,$ident.start);
        }
    ;

literal returns[AbstractExpr tree]
    : integer=INT {
        try{
        int integer_value = Integer.parseInt($integer.text);
        $tree = new IntLiteral(integer_value);
        } catch (NumberFormatException e){
         $tree = null;
         throw new InvalidSizeInteger(this,$ctx,$integer.text);
        }
        setLocation($tree,$integer);
        }
    | fd=FLOAT {
        float float_value = 0;
        float_value = Float.parseFloat($fd.text);
        if(Float.isNaN(float_value)){
            throw new NaNFloatException(this,$ctx,$fd.text);
          }
        if(Float.isInfinite(float_value)){
            throw new InfiniteFloatException(this,$ctx,$fd.text);
          }
        $tree = new FloatLiteral(float_value);
        setLocation($tree,$fd);
        }
    | chain_value=STRING {
      String chain = $chain_value.text.substring(1, $chain_value.text.length()-1);
      chain = chain.replace("\\\"","\"");
      chain = chain.replace("\\\\","\\");
      $tree = new StringLiteral(chain);
      setLocation($tree,$chain_value);
        }
    | TRUE {
        $tree = new BooleanLiteral(true);
        setLocation($tree,$TRUE);
        }
    | FALSE {
        $tree = new BooleanLiteral(false);
        setLocation($tree,$FALSE);
        }
    | THIS {
        $tree = new This(true);
        setLocation($tree,$THIS);


        }
    | NULL {
        $tree = new Null();
        setLocation($tree,$NULL);


        }
    ;

ident returns[AbstractIdentifier tree]
    : id=IDENT {
        $tree = new Identifier(this.getDecacCompiler().getSymbolTable().create($id.text));
        setLocation($tree,$id);
        }
    ;

/****     Class related rules     ****/

list_classes returns[ListDeclClass tree]
@init
{
  		$tree = new ListDeclClass();
}
    :
      (c1=class_decl {
        assert($c1.tree != null);
        $tree.add($c1.tree);
        setLocation($tree,$c1.start);

        }
      )*
    ;

class_decl returns[AbstractDeclClass tree]
    : CLASS name=ident superclass=class_extension OBRACE class_body CBRACE {
        assert($name.tree != null);
        assert($superclass.tree != null);
        assert($class_body.fieldList != null);
        assert($class_body.methodList != null);
        $tree = new DeclClass($name.tree, $superclass.tree, $class_body.fieldList, $class_body.methodList);
        setLocation($tree,$CLASS);
        }
    ;

class_extension returns[AbstractIdentifier tree]
    : EXTENDS ident {
      assert($ident.tree != null);
    	$tree = $ident.tree;
    	setLocation($tree, $EXTENDS);
        }
    | /* epsilon */ {
          $tree = new Identifier(this.getDecacCompiler().getSymbolTable().create("Object"));

        }
    ;

class_body returns[ListDeclField fieldList, ListDeclMethod methodList]
@init {
	$methodList = new ListDeclMethod();
	$fieldList = new ListDeclField();
}
    : (m=decl_method {
        assert($m.tree != null);
        $methodList.add($m.tree);
        }
      | decl_field_set[$fieldList]
      )*
    ;

decl_field_set[ListDeclField l]
    : v=visibility t=type list_decl_field[$l,$type.tree,$v.tree]
      SEMI
    ;

visibility returns[Visibility tree]
    : /* epsilon */ {
        $tree = Visibility.PUBLIC;
        }
    | PROTECTED {
      	$tree = Visibility.PROTECTED;
        }
    ;

list_decl_field[ListDeclField l, AbstractIdentifier t, Visibility v]
    : dv1=decl_field[$t,$v]{
      assert($l != null);
      assert($v != null);
      assert($dv1.tree != null);
      $l.add($dv1.tree);
      setLocation($l,$dv1.start);
    }
        (COMMA dv2=decl_field[$t,$v]{
          assert($dv2.tree != null);
          $l.add($dv2.tree);
          setLocation($l,$dv2.start);
        }
      )*
    ;

decl_field[AbstractIdentifier t, Visibility v] returns[AbstractDeclField tree]
@init{
  AbstractInitialization init = new NoInitialization();
}
    : i=ident {
        assert($i.tree != null);
        }
      (EQUALS e=expr {
        assert($e.tree != null);
        init = new Initialization($e.tree);
        setLocation(init,$e.start);
        }
      )? {
          assert($t != null);
          assert($v != null);
          $tree = new DeclField($i.tree,$t,init,$v);
          setLocation($tree,$i.start);
        }
    ;

decl_method returns [AbstractDeclMethod tree]
@init {
        AbstractMethodBody temp_body;
}
    : type ident OPARENT params=list_params CPARENT (block {
          assert($ident.tree != null);
          assert($type.tree != null);
          assert($block.decls != null);
          assert($block.insts != null);
          assert($params.tree != null);
          temp_body = new MethodBody($block.decls, $block.insts);
    		  setLocation(temp_body, $block.start);
        }
      | ASM OPARENT code=multi_line_string CPARENT SEMI {
          assert($code.text !=  null);
          StringLiteral code_string = new StringLiteral($code.text.substring(1, $code.text.length()-1));
          temp_body = new MethodAsmBody(code_string);
          setLocation(temp_body, $ASM);
        }
      ) {
        $tree = new DeclMethod($type.tree, $ident.tree, $params.tree, temp_body);
        setLocation($tree, $type.start);
        }
    ;

list_params returns[ListDeclParam tree]
@init{
  $tree = new ListDeclParam();
}
    : (p1=param {
      assert($p1.tree != null);
      $tree.add($p1.tree);
      setLocation($tree,$p1.start);
        } (COMMA p2=param {
          assert($p2.tree != null);
        	$tree.add($p2.tree);
          setLocation($tree,$p2.start);
        }
      )*)?
    ;

multi_line_string returns[String text, Location location]
    : s=STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    | s=MULTI_LINE_STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    ;

param returns[AbstractDeclParam tree]
    : type ident {
        assert($ident.tree != null);
        assert($type.tree != null);
        $tree = new DeclParam($type.tree,$ident.tree);
        setLocation($tree, $type.start);
        }
    ;
